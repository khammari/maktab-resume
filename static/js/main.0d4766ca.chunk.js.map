{"version":3,"sources":["components/Fullpage.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","divStyle","backgroundColor","color","react_default","a","createElement","id","className","concat","style","Component","Card","alt","title","src","pic","colors","App","state","first","second","third","changeColor","firstC","Math","floor","random","length","secondC","thirdC","_this","setState","Navbar","inverse","fixedTop","collapseOnSelect","Header","Brand","href","Toggle","Collapse","Nav","NavItem","eventKey","pullRight","onClick","src_components_Fullpage","data","subtitle","Object","keys","links","map","key","react_social_icons","url","sections","items","p","content","skills","src_components_Card","image","lib_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d4766ca.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Fullpage.css'\r\nclass Fullpage extends Component {\r\n    render() {\r\n        const {children} = this.props;\r\n        const divStyle = {\r\n            backgroundColor : this.props.color\r\n        };\r\n        return (\r\n            <div id={this.props.id} className={`fullpage ${this.props.className || ''}`} style={divStyle}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fullpage;","import React, {Component} from 'react';\r\nimport './Card.css'\r\nclass Card extends Component {\r\n    render() {\r\n        const {children} = this.props;\r\n        return (\r\n            <div className={`col ${this.props.className || ''}`}>\r\n                <img alt={this.props.title} src={this.props.pic}/>\r\n                <br/>\r\n                <br/>\r\n                <p>{this.props.title}</p>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React, {Component} from 'react';\r\nimport {Nav, Navbar, NavItem} from 'react-bootstrap';\r\nimport './App.css';\r\nimport data from \"./data.json\";\r\nimport {SocialIcon} from \"react-social-icons\";\r\nimport SnowStorm from \"react-snowstorm\";\r\nimport FullPage from \"./components/Fullpage\"\r\nimport Card from \"./components/Card\";\r\n\r\n\r\nlet colors = [\"burlywood\", \"darksalmon\", \"bisque\", \"coral\", \"darkgoldenrod\", \"darkkhaki\", \"lightcoral\"];\r\n\r\n    class App extends Component {\r\n        state = {\r\n            first: \"burlywood\",\r\n            second: \"darksalmon\",\r\n            third: \"bisque\"\r\n        };\r\n\r\n        changeColor = () => {\r\n            let firstC = Math.floor(Math.random() * (Math.floor(colors.length) + 1));\r\n            let secondC = Math.floor(Math.random() * (Math.floor(colors.length) + 1));\r\n            let thirdC = Math.floor(Math.random() * (Math.floor(colors.length) + 1));\r\n\r\n            this.setState(state => ({\r\n                first: colors[firstC],\r\n                second: colors[secondC],\r\n                third: colors[thirdC]\r\n            }))\r\n        };\r\n\r\n        render() {\r\n            return (\r\n                <div className=\"App\">\r\n                    <Navbar inverse fixedTop collapseOnSelect>\r\n                        <Navbar.Header>\r\n                            <Navbar.Brand>\r\n                                <a href=\"#first\">React-Resume</a>\r\n                            </Navbar.Brand>\r\n                            <Navbar.Toggle/>\r\n                        </Navbar.Header>\r\n                        <Navbar.Collapse>\r\n                            <Nav>\r\n                                <NavItem eventKey={1} href=\"#first\">\r\n                                    Start\r\n                                </NavItem>\r\n                                <NavItem eventKey={2} href=\"#second\">\r\n                                    About\r\n                                </NavItem>\r\n                                <NavItem eventKey={2} href=\"#third\">\r\n                                    Skills\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <Nav pullRight>\r\n                                <NavItem eventKey={1} href=\"#\" onClick={this.changeColor}>\r\n                                    Click me!\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                    <FullPage id={\"first\"} className=\"first\" color={this.state.first}>\r\n                        <h1 className=\"title\">{data.title}</h1>\r\n                        <div>\r\n                            <h2>{data.subtitle}</h2>\r\n                        </div>\r\n                        <div className=\"icon-wrapper\">\r\n                            {Object.keys(data.links).map(key => {\r\n                                return (\r\n                                    <div className=\"icon\">\r\n                                        <SocialIcon url={data.links[key]}/>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </FullPage>\r\n                    <FullPage id={\"second\"} className={\"second\"} color={this.state.second}>\r\n                        <h3>{data.sections[0].title}</h3>\r\n                        <div className=\"paragraphs\">\r\n                            {data.sections[0].items.map(p => {\r\n                                return (\r\n                                    <p>\r\n                                        {p.content}\r\n                                    </p>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </FullPage>\r\n                    <FullPage id={\"third\"} className={\"third\"} color={this.state.third}>\r\n                        <h3>{data.sections[1].title}</h3>\r\n                        <div className=\"flex-grid-thirds\">\r\n                            {\r\n                                data.sections[1].items.map(skills => {\r\n                                    return (\r\n                                        <Card title={skills.content.title} pic={skills.content.image}>\r\n                                        </Card>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </FullPage>\r\n                    <SnowStorm/>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}